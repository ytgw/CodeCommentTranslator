Copyright Joyent, Inc. and other Node contributors.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:







The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.


THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.








































































































26 Feb 16:19:34









Log is just a thin wrapper to console.log that prepends a timestamp








Inherit the prototype methods from one constructor into another.

The Function.prototype.inherits from lang.js rewritten as a standalone function (not on Function.prototype). NOTE: If this file is to be loaded during bootstrapping this function needs to be rewritten using some native functions as prototype setup using normal JavaScript does not work as expected during bootstrapping (see mirror.js in r114903).





@param {function} ctor Constructor function which needs to inherit the prototype. @param {function} superCtor Constructor function to inherit prototype from. @throws {TypeError} Will error if either constructor is null, or if the super constructor lacks a prototype.


























Don't do anything if source isn't an object











`!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M). Because `null` is a special error value in callbacks which means "no error occurred", we error-wrap so the callback consumer can distinguish between "the promise rejected with null" or "the promise fulfilled with undefined".














We DO NOT return the promise as it gives the user a false sense that the promise is actually somehow related to the callback's execution and that the callback throwing will reject the promise.








In true node style we process the callback on `nextTick` with all the implications (stack, `uncaughtException`, `async_hooks`)







It is possible to manipulate a functions `length` or `name` property. This guards against the manipulation.



















Keep the `exports =` so that various functions can still be monkeypatched









































